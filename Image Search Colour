import cv2
import numpy as np
import os
import matplotlib.pyplot as plt

def calculate_color_histogram(image, bins=(8, 8, 8)):
    """
    Calculate and normalize a color histogram for an image.
    :param image: Input image
    :param bins: Number of bins for each channel
    :return: Flattened normalized histogram
    """
    hist = cv2.calcHist([image], [0, 1, 2], None, bins, [0, 256, 0, 256, 0, 256])
    cv2.normalize(hist, hist)
    return hist.flatten()

def compare_histograms(hist1, hist2, method=cv2.HISTCMP_CORREL):
    """
    Compare two histograms using a specified method.
    :param hist1: First histogram
    :param hist2: Second histogram
    :param method: Comparison method (default: correlation)
    :return: Similarity score
    """
    return cv2.compareHist(hist1, hist2, method)

def search_and_display_top_results(target_image_path, dataset_path, bins=(8, 8, 8), top_n=5):
    """
    Search for images in a dataset matching a specific target image by color histogram.
    Display the top N results.
    :param target_image_path: Path to the target image
    :param dataset_path: Path to the dataset folder
    :param bins: Histogram bins
    :param top_n: Number of top results to display
    """
    # Load target image and calculate its histogram
    target_image = cv2.imread(target_image_path)
    target_hist = calculate_color_histogram(target_image, bins)
    
    results = []
    for image_name in os.listdir(dataset_path):
        image_path = os.path.join(dataset_path, image_name)
        image = cv2.imread(image_path)
        if image is None:
            continue
        # Calculate histogram and similarity
        image_hist = calculate_color_histogram(image, bins)
        similarity = compare_histograms(target_hist, image_hist)
        results.append((similarity, image_name, image))
    
    # Sort results by similarity in descending order
    results.sort(key=lambda x: x[0], reverse=True)
    
    # Display the target image and top N results
    plt.figure(figsize=(15, 5))
    plt.subplot(1, top_n + 1, 1)
    plt.imshow(cv2.cvtColor(target_image, cv2.COLOR_BGR2RGB))
    plt.title("Target Image")
    plt.axis("off")
    
    for i, (similarity, image_name, image) in enumerate(results[:top_n]):
        plt.subplot(1, top_n + 1, i + 2)
        plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
        plt.title(f"Match {i + 1}\n({similarity:.2f})")
        plt.axis("off")
    
    plt.show()

# Example usage:
target_image_path = "path_to_target_image.jpg"
dataset_folder = "path_to_dataset/"

search_and_display_top_results(target_image_path, dataset_folder)
