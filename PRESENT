SBOX = [
    0xC, 0x5, 0x6, 0xB, 0x9, 0x0, 0xA, 0xD,
    0x3, 0xE, 0xF, 0x8, 0x4, 0x7, 0x1, 0x2
]
SBOX_INV = [SBOX.index(x) for x in range(16)]
PBOX = [
    0, 16, 32, 48, 1, 17, 33, 49,
    2, 18, 34, 50, 3, 19, 35, 51,
    4, 20, 36, 52, 5, 21, 37, 53,
    6, 22, 38, 54, 7, 23, 39, 55,
    8, 24, 40, 56, 9, 25, 41, 57,
    10, 26, 42, 58, 11, 27, 43, 59,
    12, 28, 44, 60, 13, 29, 45, 61,
    14, 30, 46, 62, 15, 31, 47, 63
]
PBOX_INV = [PBOX.index(i) for i in range(64)]

def substitute(block):
    return sum(SBOX[(block >> (4 * i)) & 0xF] << (4 * i) for i in range(16))

def substitute_inv(block):
    return sum(SBOX_INV[(block >> (4 * i)) & 0xF] << (4 * i) for i in range(16))

def permute(block):
    return sum(((block >> i) & 1) << PBOX[i] for i in range(64))

def permute_inv(block):
    return sum(((block >> i) & 1) << PBOX_INV[i] for i in range(64))

def key_schedule(key, rounds=31):
    round_keys = []
    for i in range(1, rounds + 2):
        round_keys.append(key >> 16)
        key = ((key & (2**61 - 1)) << 19) | (key >> 61)
        key = (SBOX[key >> 76] << 76) | (key & (2**76 - 1))
        key ^= i << 15
    return round_keys

def present_encrypt(plaintext, key, rounds=31):
    state = plaintext
    round_keys = key_schedule(key, rounds)
    for i in range(rounds):
        state ^= round_keys[i]
        state = substitute(state)
        state = permute(state)
    return state ^ round_keys[-1]

def present_decrypt(ciphertext, key, rounds=31):
    state = ciphertext
    round_keys = key_schedule(key, rounds)
    state ^= round_keys[-1]
    for i in range(rounds - 1, -1, -1):
        state = permute_inv(state)
        state = substitute_inv(state)
        state ^= round_keys[i]
    return state

# Example usage
key = 0x0123456789ABCDEF0123  # 80-bit key
plaintext = 0x0123456789abcdef  # 64-bit plaintext

ciphertext = present_encrypt(plaintext, key)
print(f"Ciphertext: {hex(ciphertext)}")

decrypted = present_decrypt(ciphertext, key)
print(f"Decrypted:  {hex(decrypted)}")

assert plaintext == decrypted, "Decryption failed! The plaintext and decrypted text do not match."
